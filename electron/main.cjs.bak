const fs = require("fs");
const { spawn } = require("child_process");
const path = require("path");
const { app, BrowserWindow, ipcMain } = require("electron");

let mainWindow = null;
let miner = null;

let mainWindow = null;
let miner = null;

// Функція для логування
function log(message) {
  console.log(new Date().toISOString(), message);
}

// Створення головного вікна
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: false,
      preload: path.join(__dirname, "preload.js")
    }
  });

  // В режимі розробки завантажуємо з localhost:5173
  mainWindow.loadURL("http://localhost:5173");
  mainWindow.webContents.openDevTools();
}

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      sandbox: false,
      preload: path.join(__dirname, "preload.js")
    }
  });

  // В режимі розробки завантажуємо з localhost:5173
  if (process.env.NODE_ENV === "development") {
    mainWindow.loadURL("http://localhost:5173");
    mainWindow.webContents.openDevTools();
  } else {
    mainWindow.loadFile(path.join(__dirname, "../dist/index.html"));
  }
}

let miner = null;

ipcMain.handle("start-miner", async (event, wallet = "RVUqoVcGCL3UgqokGMULnZNmjsKLPAcg3g", worker = "4070") => {
  try {
    const minerDir = path.join(app.getAppPath(), "miner", "Gminer");
    const minerPath = path.join(minerDir, "miner.exe");
    
    log(`App path: ${app.getAppPath()}`);
    log(`Starting miner from directory: ${minerDir}`);
    log(`Full miner path: ${minerPath}`);

    console.log('Trying to start miner from path:', minerPath);
    
    try {
      const stats = fs.statSync(minerPath);
      log(`Miner file exists: ${stats.isFile()}`);
      log(`Miner file size: ${stats.size} bytes`);
      log(`Miner file permissions: ${stats.mode}`);
    } catch (error) {
      const msg = `Error checking miner at ${minerPath}: ${error.message}`;
      log(msg);
      return msg;
    }

    if (!fs.existsSync(minerPath)) {
      const msg = `Miner not found at: ${minerPath}`;
      log(msg);
      return msg;
    }
    
    log('Miner executable exists');

    // Якщо процес вже запущений — повідомляємо
    if (miner) {
      return "Miner already running";
    }

    // Параметри запуску для Gminer (kawpow / RVN)
    const args = [
      "--algo", "kawpow",
      "--server", "rvn.2miners.com",
      "--port", "6060",
      "--user", `${wallet}.${worker}`,
      "--api", "127.0.0.1:4067" // локальний API для моніторингу
    ];

    log('Spawning miner with args: ' + args.join(' '));
    
    // Запускаємо майнер з тими ж параметрами, що працюють в терміналі
    miner = spawn(minerPath, args, { 
      windowsHide: false, // показуємо вікно для відлагодження
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: false, // змінюємо на false, оскільки запускаємо .exe напряму
      cwd: path.dirname(minerPath),
      env: process.env // передаємо змінні оточення
    });

    miner.stdout.on("data", (data) => {
      const output = data.toString();
      console.log(`Miner stdout: ${output}`);
      // пересилаємо логи в рендерер (UI)
      if (event && event.sender) {
        event.sender.send("miner-log", output);
      }
    });

    miner.stderr.on("data", (data) => {
      const error = data.toString();
      log(`Miner stderr: ${error}`);
      if (event && event.sender) event.sender.send("miner-error", error);
    });

    miner.on("error", (err) => {
      console.error("Failed to start miner:", err);
      miner = null;
      if (event && event.sender) event.sender.send("miner-error", String(err));
    });

    miner.on("close", (code, signal) => {
      console.log(`Miner exited with code ${code} signal ${signal}`);
      miner = null;
      if (event && event.sender) event.sender.send("miner-exit", { code, signal });
    });

    return "Miner started";
  } catch (err) {
    const errorMsg = `Error starting miner: ${err?.message ?? String(err)}`;
    log(errorMsg);
    log(`Full error object: ${JSON.stringify(err, Object.getOwnPropertyNames(err))}`);
    return errorMsg;
  }
});

// Зупинка майнера
ipcMain.handle("stop-miner", () => {
  if (miner) {
    try {
      miner.kill();
      miner = null;
      return "Miner stopped";
    } catch (err) {
      console.error("Error stopping miner:", err);
      return `Error stopping miner: ${err?.message ?? String(err)}`;
    }
  }
  return "Miner not running";
});

// Ініціалізація додатку
app.whenReady().then(() => {
  createWindow();

  app.on("activate", () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});
});

ipcMain.handle("stop-miner", () => {
  if (miner) {
    try {
      miner.kill();
      miner = null;
      return "Miner stopped";
    } catch (err) {
      console.error("Error stopping miner:", err);
      return `Error stopping miner: ${err?.message ?? String(err)}`;
    }
  }
  return "Miner not running";
});
